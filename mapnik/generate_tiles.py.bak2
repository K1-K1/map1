#!/usr/bin/env python
from math import pi,cos,sin,log,exp,atan
from subprocess import call
import sys, os
from Queue import Queue

import threading

from PIL import Image, ImageMath

import color_to_alpha
import json

try:
    import mapnik2 as mapnik
except:
    import mapnik

import cairo

DEG_TO_RAD = pi/180
RAD_TO_DEG = 180/pi

# Default number of rendering threads to spawn, should be roughly equal to number of CPU cores available
NUM_THREADS = 1


def minmax (a,b,c):
    a = max(a,b)
    a = min(a,c)
    return a

class GoogleProjection:
    def __init__(self,levels=18):
        self.Bc = []
        self.Cc = []
        self.zc = []
        self.Ac = []
        c = 256
        for d in range(0,levels):
            e = c/2;
            self.Bc.append(c/360.0)
            self.Cc.append(c/(2 * pi))
            self.zc.append((e,e))
            self.Ac.append(c)
            c *= 2
                
    def fromLLtoPixel(self,ll,zoom):
         d = self.zc[zoom]
         e = round(d[0] + ll[0] * self.Bc[zoom])
         f = minmax(sin(DEG_TO_RAD * ll[1]),-0.9999,0.9999)
         g = round(d[1] + 0.5*log((1+f)/(1-f))*-self.Cc[zoom])
         return (e,g)
     
    def fromPixelToLL(self,px,zoom):
         e = self.zc[zoom]
         f = (px[0] - e[0])/self.Bc[zoom]
         g = (px[1] - e[1])/-self.Cc[zoom]
         h = RAD_TO_DEG * ( 2 * atan(exp(g)) - 0.5 * pi)
         return (f,h)



class RenderThread:
    def __init__(self, tile_dir, mapfiles, q, printLock, maxZoom, overwrite = False, tile_size = 256, tile_count = 1, buffer_size = 128, layer_options = {}):
        self.tile_size = tile_size
        self.layerOptions = layer_options
        self.tile_count = tile_count
        self.buffer_size = buffer_size
        self.tile_dir = tile_dir
        self.q = q
        
        self.printLock = printLock
        self.overwrite = overwrite
        self.m = []
        for mapfile in mapfiles:
            m = mapnik.Map(int(tile_size*tile_count), int(tile_size*tile_count))            
            # Load style XML            
            mapnik.load_map(m, mapfile, True)
            self.m.append(m)
            
        # Obtain <Map> projection
        self.prj = mapnik.Projection(self.m[0].srs)
        # Projects between tile pixel co-ordinates and LatLong (EPSG:4326)
        self.tileproj = GoogleProjection(maxZoom+1)


    def render_tile(self, tile_uris, x, y, z):

        # Calculate pixel positions of bottom-left & top-right
        p0 = (x * self.tile_size * self.tile_count, (y + 1) * self.tile_size * self.tile_count)
        p1 = ((x + 1) * self.tile_size * self.tile_count, y * self.tile_size * self.tile_count)

        # Convert to LatLong (EPSG:4326)
        l0 = self.tileproj.fromPixelToLL(p0, z);
        l1 = self.tileproj.fromPixelToLL(p1, z);

        # Convert to map projection (e.g. mercator co-ords EPSG:900913)
        c0 = self.prj.forward(mapnik.Coord(l0[0],l0[1]))
        c1 = self.prj.forward(mapnik.Coord(l1[0],l1[1]))

        # Bounding box for the tile
        if hasattr(mapnik,'mapnik_version') and mapnik.mapnik_version() >= 800:
            bbox = mapnik.Box2d(c0.x,c0.y, c1.x,c1.y)
        else:
            bbox = mapnik.Envelope(c0.x,c0.y, c1.x,c1.y)
        render_size = self.tile_count * self.tile_size        
        k = 0
        for m in self.m:
            m.resize(int(render_size), int(render_size))
            m.zoom_to_box(bbox)
            m.buffer_size = self.buffer_size

            # Render image with default Agg renderer
            im = mapnik.Image(int(render_size), int(render_size))            
            mapnik.render(m, im)
            try:
                im = Image.fromstring('RGBA',(int(render_size), int(render_size)),im.tostring())
            
                for i in range(self.tile_count):
                    for j in range(self.tile_count):
                        name = tile_uris[i*self.tile_count +j] + '.im'
                        im2 = im.crop((int(self.tile_size*i), int(self.tile_size*j),int(self.tile_size*(i+1)), int(self.tile_size*(j+1))))                    
                        if k == 0: 
                            im2.save(name,'im')
                        else:
                            im3 = Image.open(name)
                            im3.convert('RGB')                        
                            if str(k) in self.layerOptions and 'colorToAlpha' in self.layerOptions[str(k)]:
                                im2 = color_to_alpha.color_to_alpha(im2,self.layerOptions[str(k)]['colorToAlpha'])
                            alpha = im2.split()[-1]
                            if str(k) in self.layerOptions and 'opacity' in self.layerOptions[str(k)]:
                                alpha = Image.eval(alpha,lambda a: a*self.layerOptions[str(k)]['opacity'])
                            im3 = Image.composite(im2,im3,alpha)
                            im3.convert('RGB').save(name,'im')
            except Exception:
                print "Error!"
                            
            k += 1
                                        
        for i in range(self.tile_count):
            for j in range(self.tile_count):
                name = tile_uris[i*self.tile_count +j] + '.im'
                im  = Image.open(name)
                im.load()
                im.save(tile_uris[i*self.tile_count +j],'JPEG',quality=85)
                os.remove(name)
                   
                   
        #for i in range(self.tile_count):
        #    for j in range(self.tile_count):
        #        im = Image.open(tile_uris[i*self.tile_count +j]+"-0")
        #        for k in range(1,kcount):
        #            tmp_img = Image.open(tile_uris[i*self.tile_count +j]+("-%d" % k)).convert('RGBA')
        #            if str(k) in self.layerOptions and 'colorToAlpha' in self.layerOptions[str(k)]:
        #                tmp_img = color_to_alpha.color_to_alpha(tmp_img,self.layerOptions[str(k)]['colorToAlpha'])
        #            alpha = tmp_img.split()[3]
        #            if str(k) in self.layerOptions and 'opacity' in self.layerOptions[str(k)]:
        #                alpha = Image.eval(alpha,lambda a: a*self.layerOptions[str(k)]['opacity'])
        #            im.paste(tmp_img, mask = alpha)
        #            os.remove(tile_uris[i*self.tile_count +j]+("-%d" % k))
        #        im.save(tile_uris[i*self.tile_count +j],'png')
        #        os.remove(tile_uris[i*self.tile_count +j]+"-0")                                                                
                
        #for k in range(0,kcount):
        #    os.remove("/tmp/%d-%d-%d-%d.png" % (x,y,z,k))
        

    def loop(self):
        while True:
            #Fetch a tile from the queue and render it
            r = self.q.get()
            if (r == None):
                self.q.task_done()
                break
            else:
                (name, tile_uris, x, y, z) = r

            exists= ""
            overwrite = ""
            skip = False
            for tile_uri in tile_uris:                
                if os.path.isfile(tile_uri):
                    if self.overwrite:
                        overwrite = "overwrite"
                        os.remove(tile_uri)                        
                    else:
                        skip = True                        
                        exists= "exists"
            
            if not skip:
                self.render_tile(tile_uris, x, y, z)                        
               
            for tile_uri in tile_uris:
                bytes=os.stat(tile_uri)[6]
                empty= ''
                if bytes == 103:
                    empty = " Empty Tile "
                self.printLock.acquire()
                print name, ":", tile_uri, exists, empty, overwrite                
                self.printLock.release()                            
            self.q.task_done()
            



def render_tiles(bbox, mapfiles, tile_dir, minZoom=1,maxZoom=18, name="unknown", num_threads=NUM_THREADS, tms_scheme=False, overwrite = False, tile_size = 256.0, tile_count = 1, buffer_size = 128, layer_options = {}):
    
    gprj = GoogleProjection(maxZoom+1) 

    ll0 = (bbox[0],bbox[3])
    ll1 = (bbox[2],bbox[1])
    
    px0 = gprj.fromLLtoPixel(ll0,maxZoom)
    px1 = gprj.fromLLtoPixel(ll1,maxZoom)
    
    tmp = int(max((px1[0]-px0[0])/tile_size,(px1[1]-px0[1])/tile_size))
    if tmp < tile_count:
        tile_count = tmp    
    
    print "render_tiles(",bbox, mapfiles, tile_dir, minZoom,maxZoom, name,overwrite,tile_count,buffer_size, ")"

    # Launch rendering threads
    queue = Queue(32)
    printLock = threading.Lock()
    renderers = {}
    for i in range(num_threads):
        renderer = RenderThread(tile_dir, mapfiles, queue, printLock, maxZoom, overwrite, tile_size, tile_count, buffer_size, layer_options)
        render_thread = threading.Thread(target=renderer.loop)
        render_thread.start()
        #print "Started render thread %s" % render_thread.getName()
        renderers[i] = render_thread

    if not os.path.isdir(tile_dir):
         os.mkdir(tile_dir)
    
    for z in range(minZoom,maxZoom + 1):
        px0 = gprj.fromLLtoPixel(ll0,z)
        px1 = gprj.fromLLtoPixel(ll1,z)

        # check if we have directories in place
        zoom = "%s" % z
        if not os.path.isdir(tile_dir + zoom):
            os.mkdir(tile_dir + zoom)
        for x in range(int(px0[0]/(tile_size*tile_count)),int(px1[0]/(tile_size*tile_count)+1)):
            # Validate x co-ordinate
            if (x < 0) or (x >= 2**z):
                continue
            # check if we have directories in place
            for i in range(tile_count):
                str_x = "%s" % (tile_count*x + i)
                if not os.path.isdir(tile_dir + zoom + '/' + str_x):
                    os.mkdir(tile_dir + zoom + '/' + str_x)
            for y in range(int(px0[1]/(tile_count*tile_size)),int(px1[1]/(tile_count*tile_size)+1)):
                # Validate x co-ordinate
                if (y < 0) or (y >= 2**z):
                    continue
                tile_uris = []
                for i in range(tile_count):
                    str_x = "%s" % (tile_count*x + i)
                    for j in range(tile_count):
                        # flip y to match OSGEO TMS spec
                        if tms_scheme:
                            str_y = "%s" % ((2**z-1) - (tile_count*y + j))
                        else:
                            str_y = "%s" % (tile_count*y + j)
                        tile_uris.append(tile_dir + zoom + '/' + str_x + '/' + str_y + '.jpg')
                # Submit tile to be rendered into the queue
                t = (name, tile_uris, x, y, z)
                try:
                    queue.put(t)
                except KeyboardInterrupt:
                    raise SystemExit("Ctrl-c detected, exiting...")

    # Signal render threads to exit by sending empty request to queue
    for i in range(num_threads):
        queue.put(None)
    # wait for pending rendering jobs to complete
    queue.join()
    for i in range(num_threads):
        renderers[i].join()

REGIONS = {
    'World'              : (-180.0,-90.0, 180.0,90.0),
    'Czech republic'     : (12,48.5,19,51.1),
    'Stredni cechy'      : (13.6,49.6,15.5,50.5),
    'Okoli Krkonos'      : (14.83,50.45,15.92,50.89),    
    'Zapadni Krkonose'   : (15.3467,50.6781,15.6291,50.8022),
    'Okoli Prahy'        : (14,49.8,15,50.3),
    'Praha'              : (14.259,49.946,14.660,50.156),
    'Centrum Prahy'      : (14.3816,50.0607,14.4887,50.1052),
    'Trebonsko'          : (14.607,48.920,14.983,49.212),
    'Okoli Jiloveho'     : (14.3879,49.8398,14.69916,49.9589),
}

RENDER_PROPERTIES = {
     8: ( 4, 256),
     9: ( 6, 384),
    10: ( 8, 512),
    11: (10, 640),
    12: (13, 768),
    13: (16, 896),
    14: (32,1024),
    15: (32,1024),
}


if __name__ == "__main__":
    home = os.environ['HOME']
    try:
        mapfiles = os.environ['MAPNIK_MAP_FILES'].strip(';').split(';')
    except KeyError:
        mapfiles = [home + "/svn.openstreetmap.org/applications/rendering/mapnik/osm-local.xml"]
        
    try:        
        layer_options = json.loads(os.environ['LAYER_OPTIONS'])
    except KeyError:
        layer_options = {}
        
    try:
        tile_dir = os.environ['MAPNIK_TILE_DIR']
    except KeyError:
        tile_dir = home + "/osm/tiles/"

    if not tile_dir.endswith('/'):
        tile_dir = tile_dir + '/'
        
    try:
        zooms = map(int,os.environ['ZOOMS'].split(','))
    except KeyError:
        zooms = range(8,13)
            
    try:
        regions = os.environ['REGIONS'].split(',')
    except KeyError:
        regions = ['Czech republic']            
                
    try:
        overwrite = os.environ['MODE'].lower() == 'overwrite'        
    except KeyError:
        overwrite = False

    for region in regions:
        for zoom in zooms:
            render_tiles(REGIONS[region], mapfiles, tile_dir, zoom, zoom, region, overwrite = overwrite, tile_count = RENDER_PROPERTIES[zoom][0], buffer_size = RENDER_PROPERTIES[zoom][1], layer_options = layer_options)
