#!/usr/bin/env bash



function download {
    OVERPASS_SERVERS=( "https://overpass-api.de/api"  "https://overpass.kumi.systems/api/" )
    OVERPASS_SERVERS_COUNT=${#OVERPASS_SERVERS[@]}
    DB=gis_eu
    LAT_START=30
    LON_START=-20
    LAT_END=80
    LON_END=52
    LAT_STEP=2
    LON_STEP=6
    i=0
    str=""
    #qs="${1}" 
    OLD_IFS=$IFS
    IFS=''
    qs="$1[*]"
    qs=(${!qs})  
    IFS=$OLD_IFS 
    echo $qs2 
    #qs=("raz" "dva" "tri" )   
    for qq in "${qs[@]}"; do	
	for i_lat in $(eval echo "{$LAT_START..$LAT_END..$LAT_STEP}"); do
	    lat_from=$i_lat
	    lat_to=$(python <<< "print min($LAT_END,$i_lat+$LAT_STEP)")	    
	    for i_lon in $(eval echo "{$LON_START..$LON_END..$LON_STEP}"); do
		lon_from=$i_lon
		lon_to=$(python <<< "print min($LON_END,$i_lon+$LON_STEP)")
		q=${qq//%lon1%/$lon_from}
		q=${q//%lon2%/$lon_to}
		q=${q//%lat1%/$lat_from}
		q=${q//%lat2%/$lat_to}		
		i=$(($i+1))
		server=${OVERPASS_SERVERS[$(($i % $OVERPASS_SERVERS_COUNT))]}
		wget -T 86400 -O - "$server/interpreter?data=[timeout:86400];$q;out;" | osmconvert - --out-o5m > "/tmp/~$2.$i_lon.$i_lat.o5m"
		while [ $? -ne 0 ]; do
		    i=$(($i+1))
		    server=${OVERPASS_SERVERS[$(($i % $OVERPASS_SERVERS_COUNT))]}
		    wget -T 86400 -O - "$server/interpreter?data=[timeout:86400];$q;out;" | osmconvert - --out-o5m > "/tmp/~$2.$i_lon.$i_lat.o5m"
		done			
		if [ -f "/tmp/$2.o5m" ]; then
		    osmconvert "/tmp/$2.o5m" "/tmp/~$2.$i_lon.$i_lat.o5m" --out-o5m > "/tmp/~$2.o5m"
		    FS1=$(stat -c%s "/tmp/~$2.$i_lon.$i_lat.o5m")
		    FS2=$(stat -c%s "/tmp/~$2.o5m")
		    if [ $FS1 -g $FS2 ]; then
			unlink "/tmp/~$2.o5m"
		    else			    
			unlink "/tmp/$2.o5m"
			mv "/tmp/~$2.o5m" "/tmp/$2.o5m"
		    fi
		    unlink "/tmp/~$2.$i_lon.$i_lat.o5m" 
		else
		    mv "/tmp/~$2.$i_lon.$i_lat.o5m" "/tmp/$2.o5m"
		fi
	    done
	done
    done
    osmconvert "/tmp/$2.o5m" --out-osm | bzip2 > "/tmp/$2.osm.bz2"
    unlink "/tmp/$2.o5m"    
    
    case "$3" in
    
	point)
	    echo "DROP TABLE $2; DROP INDEX $2_point_pkey,$2_point_index;" | psql -d $DB
	    ;;

	pointex)
	    echo "DROP TABLE $2; DROP INDEX $2_point_pkey,$2_point_index;" | psql -d $DB
	    ;;

	line)
	    echo "DROP TABLE $2; DROP INDEX $2_line_pkey,$2_line_index;" | psql -d $DB
	    ;;
	route)
	    echo "DROP TABLE $2; DROP INDEX $2_line_pkey,$2_line_index;" | psql -d $DB
	    ;;
	polygon)
	    echo "DROP TABLE $2; DROP INDEX $2_polygon_pkey,$2_polygon_index;" | psql -d $DB
	    ;;
    esac
        
    /usr/local/bin/osm2pgsql \
	-d $DB \
	--style "/home/klinger/mymap/osm2pgsql/$2.style" \
	--create \
	--slim --cache 30 \
	--prefix $2 \
	/tmp/$2.osm.bz2
    #unlink /tmp/$2.osm.bz2
    
    case "$3" in

	point)
	    echo "ALTER TABLE $2_point RENAME TO $2; DROP TABLE $2_polygon; DROP TABLE $2_line,$2_nodes,$2_rels,$2_roads,$2_ways;" | psql -d $DB
	    ;;
	pointex)
	    echo "CREATE TABLE $2 AS $4; DROP TABLE $2_point,$2_polygon,$2_line,$2_nodes,$2_rels,$2_roads,$2_ways; DROP TABLE $2_point,$2_polygon,$2_line,$2_nodes,$2_rels,$2_roads,$2_ways;" | psql -d $DB	    
	    ;;
	line)
	    echo "ALTER TABLE $2_line RENAME TO $2; DROP TABLE $2_polygon; DROP TABLE $2_point,$2_nodes,$2_rels,$2_roads,$2_ways;" | psql -d $DB
	    ;;
	route)
	    echo "ALTER TABLE $2_line RENAME TO $2; DROP TABLE $2_polygon;" | psql -d $DB
	    ;;
	polygon)
	    echo "ALTER TABLE $2_polygon RENAME TO $2; DROP TABLE $2_line; DROP TABLE $2_point,$2_nodes,$2_rels,$2_roads,$2_ways;" | psql -d $DB
	    ;;
    esac
    
}

q=( "node(%lat1%,%lon1%,%lat2%,%lon2%)[place~\"city|town|village|hamlet|isolated_dwelling|farm|suburb|neighbourhood|locality|island|islet\"]" )
#download q places point

q=( "node(%lat1%,%lon1%,%lat2%,%lon2%)[natural=\"peak\"]" )
download q peaks point

q=( "(rel(%lat1%,%lon1%,%lat2%,%lon2%)[waterway~\"river|stream|ditch|canal\"];);(._;way(r););(._;node(w););(way(%lat1%,%lon1%,%lat2%,%lon2%)[waterway~\"river|stream|ditch|canal\"];);(._;node(w);)" )
download q waterway line

q=( "(rel(%lat1%,%lon1%,%lat2%,%lon2%)[boundary=\"administrative\"];);(._;way(r););(._;node(w);)" )
#download q adminboundary polygon

q=(
    "node(%lat1%,%lon1%,%lat2%,%lon2%)[historic]"
    "node(%lat1%,%lon1%,%lat2%,%lon2%)[man_made]"
    "node(%lat1%,%lon1%,%lat2%,%lon2%)[leisure]"
    "node(%lat1%,%lon1%,%lat2%,%lon2%)[tourism]"
    "node(%lat1%,%lon1%,%lat2%,%lon2%)[amenity]"
    "node(%lat1%,%lon1%,%lat2%,%lon2%)[natural=\"cave_entrance\"]"
    "(rel(%lat1%,%lon1%,%lat2%,%lon2%)[building~\"church|chapel\"];);(._;way(r););(._;node(w););(way(%lat1%,%lon1%,%lat2%,%lon2%)[building~\"church|chapel\"];);(._;node(w);)"
)
#download q symbol pointex \
#    "SELECT osm_id,name,int_name,\"name:en\",\"name:de\",\"name:cs\",historic,leisure,man_made,tourism,amenity,ruins,castle_type,building,\"natural\",\"tower:type\",information,place_of_worship,\"place_of_worship:type\",z_order,way FROM symbol_point UNION SELECT osm_id,name,int_name,\"name:en\",\"name:de\",\"name:cs\",historic,leisure,man_made,tourism,amenity,ruins,castle_type,building,\"natural\",\"tower:type\",information,place_of_worship,\"place_of_worship:type\",z_order,ST_Centroid(way) AS way FROM symbol_polygon"




q=(
    "(rel(%lat1%,%lon1%,%lat2%,%lon2%)[route~\"mtb|horse|ski|bicycle|horse|hiking|foot\"];);(._;way(r););(._;node(w);)"
)

#download q route route
